#include <bits/stdc++.h>
using namespace std;

// Function to compute the largest rectangle area in a histogram
int largestRectangleArea(vector<int>& heights) {
    int n = heights.size();
    int maxArea = 0;
    stack<int> s;
    vector<int> left(n), right(n);

    // Find next smaller element on the right
    for (int i = 0; i < n; i++) {
        while (!s.empty() && heights[s.top()] >= heights[i]) {
            s.pop();
        }
        left[i] = (s.empty()) ? -1 : s.top();
        s.push(i);
    }

    while (!s.empty()) s.pop();

    // Find next smaller element on the left
    for (int i = n - 1; i >= 0; i--) {
        while (!s.empty() && heights[s.top()] >= heights[i]) {
            s.pop();
        }
        right[i] = (s.empty()) ? n : s.top();
        s.push(i);
    }

    // Calculate area
    for (int i = 0; i < n; i++) {
        int width = right[i] - left[i] - 1;
        maxArea = max(maxArea, heights[i] * width);
    }

    return maxArea;
}

// Recursive approach
int recMaxArea(vector<vector<int>>& mat, vector<int>& heights, int row, int m) {
    if (row == mat.size()) return 0;

    // Update heights for the current row
    for (int j = 0; j < m; j++) {
        heights[j] = (mat[row][j] == 1) ? heights[j] + 1 : 0;
    }

    return max(largestRectangleArea(heights), recMaxArea(mat, heights, row + 1, m));
}

// Tabulation approach
int tabulationMaxArea(vector<vector<int>>& mat, int n, int m) {
    vector<int> heights(m, 0);
    int maxArea = 0;

    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            heights[j] = (mat[i][j] == 1) ? heights[j] + 1 : 0;
        }
        maxArea = max(maxArea, largestRectangleArea(heights));
    }

    return maxArea;
}

// Space-optimized approach (same as tabulation but without extra space)
int spaceOptimizedMaxArea(vector<vector<int>>& mat, int n, int m) {
    vector<int> heights(m, 0);
    int maxArea = 0;

    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            heights[j] = (mat[i][j] == 1) ? heights[j] + 1 : 0;
        }
        maxArea = max(maxArea, largestRectangleArea(heights));
    }

    return maxArea;
}

int main() {
    int n, m;
    cout << "Enter number of rows: ";
    cin >> n;
    cout << "Enter number of columns: ";
    cin >> m;

    vector<vector<int>> mat(n, vector<int>(m));
    cout << "Enter matrix values (0s and 1s only):\n";
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            cin >> mat[i][j];
        }
    }

    // Recursive approach
    vector<int> heights(m, 0);
    cout << "Maximum rectangle area (Recursive): " << recMaxArea(mat, heights, 0, m) << endl;

    // Tabulation approach
    cout << "Maximum rectangle area (Tabulation): " << tabulationMaxArea(mat, n, m) << endl;

    // Space Optimized approach
    cout << "Maximum rectangle area (Space Optimized): " << spaceOptimizedMaxArea(mat, n, m) << endl;

    return 0;
}
